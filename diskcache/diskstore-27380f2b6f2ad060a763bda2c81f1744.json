{"expireTime":1662294700452,"key":"articles_data","val":[{"slug":"our-mission","meta":{"title":"Our Mission","date":"2020-07-16T22:12:03.284Z"},"source":"\nWe found that static code analysis is a topic that is attracting a lot of engineers, which care about code-quality and solid engineering standards. Our goal is to create an open community for developers that want to take their code and skill set to the next level.\n\nWe want this to be a community project. All code is [on Github](https://github.com/analysis-tools-dev) and we foster collaboration. If you're willing to help, head over to our Github organization, where we organize our work.\n\nIf you like to sponsor the project, please [Check out our Github Sponsors page here](https://github.com/sponsors/analysis-tools-dev/)!\n","html":"<p>We found that static code analysis is a topic that is attracting a lot of engineers, which care about code-quality and solid engineering standards. Our goal is to create an open community for developers that want to take their code and skill set to the next level.</p>\n<p>We want this to be a community project. All code is <a href=\"https://github.com/analysis-tools-dev\">on Github</a> and we foster collaboration. If you&#39;re willing to help, head over to our Github organization, where we organize our work.</p>\n<p>If you like to sponsor the project, please <a href=\"https://github.com/sponsors/analysis-tools-dev/\">Check out our Github Sponsors page here</a>!</p>\n","summary":"<p>We found that static code analysis is a topic that is attracting a lot of engineers, which care about code-quality and solid engineering standards. Our goal is to create an open community for developers that want to take their code and skill set to the next level.</p>\n"},{"slug":"picking-the-right-static-analysis-tool-for-your-use-case","meta":{"title":"Picking the Right Static Analysis Tool For Your Use-Case","date":"2021-01-26T22:12:03.284Z"},"source":"\nThis project started as a way to scratch my own itch:\n\"How do I find the best static analysis tool for my use-case?\"\n\nYears later, many people still seem to have the same problem.\nThere are more than 500 static analysis (SAST) tools out there; how can you\npossibly find the \"best\" one?\n\nHere are some guidelines that can support you on your search.\n\n## Supported Programming Language\n\nThe first question you have to ask yourself is \"which programming languages do I\nneed to support?\"\n\nIf you just want to support a single language like [TypeScript](/tag/typescript)\nor [Go](/tag/go), this will narrow down the search by a lot.\nOften times there are specialized tools for each language.\nFrom our experience, they provide better insights than a tool that supports many\nlanguages,\nso look through our [categories](/tools) to find the language you need to\nsupport.\n\nIf you have to support multiple languages, you can start with a \"metalinter\"\nthat supports these.\n\nOne advantage of using a metalinter is that it provides a consistent overview\nof all the error output for the different languages.\nAlso, you can integrate metalinters pretty quickly, as you only have to install one\ntool instead of many to get started.\n\nIf you find that a particular language is not well supported by a given\nmetalinter, that's fine: just switch off the support for that language in the\nlinter via the config and pick a dedicated linter for that language to fill the gap.\n\n## Licenses\n\nWe made sure to include the license for every tool on the page.\nThis is vital because your company might not allow certain open source licenses\nlike the GPL in your stack or you explicitly _want_ an open tool that you can\nextend and fix yourself. Proprietary tools usually come with a (sometimes hefty)\nprice tag, so you can filter those out if you want.\nOn the other hand, commercial support can be quite important in a professional\nsetup, which is where proprietary tools often shine.\nIt really depends on your use-case.\nThe [comparison page](/compare) mentions the license because of that.\n\n## Integration\n\nCan you integrate the tool into your environment?\nWe generally distinguish between three different types of integrations:\n\n- **Command-line tools**: These can be called straight from the terminal and\n  print reports in plain text or machine-readable output.\n- **Web services**: These tools provide a website for checking reports and\n  typically integrate with your continuous integration system like [Github\n  Actions](https://github.com/features/actions), [TravisCI](https://travis-ci.org/), or [CircleCI](https://circleci.com/).\n- **IDE plugins**: These integrate into your development environment (VSCode, IntelliJ,...), providing\n  valuable inline suggestions during the early phase of implementation.\n\nYou can find out how each tool integrates by looking at the little icons next\nto the name or on the overview page of tool under \"Workflow integration\".\n\n## Standards\n\nAre there any industry standards that your project needs to comply to?\nThere are quite a few [industry standards](https://www.verifysoft.com/en_grammatech_compliance_with_standards.html)\nout there.\nWhich ones are relevant to your organization depends on your industry and your partners.\nAs soon as you know which ones you need, you can search for those in the search\nwindow at the top. E.g. [LDRA](https://analysis-tools.dev/tool/ldra) complies to\nvarious standards like MISRA C & C++, JSF++ AV, CWE, CERT C, CERT C++.\n\n## Performance\n\nEspecially if you plan to run the tools regularly, say during [CI\nruns](https://en.wikipedia.org/wiki/Continuous_integration),\nyou want to make sure that the linters don't slow down the build too much.\n\nThe runtime of a linter usually grows with your project size, but it helps to look at a\ntool's issue tracker for any performance issues/bottlenecks. We made sure to include the\nlink to the source code for every tool (where available), which is where you can also\nfind the list of issues.\n\nFor proprietary tools, there is no quick way to know the performance.\nIf you're wavering between two options, performance can be a decision\ncriterion, so make sure to check the websites of the vendors for benchmarks and\nspeed expectations.\n\n## Usability\n\nIf you can't decipher what the tool is trying to tell you, it's the developer's\nfault and not the user's.\nSo the question which tool provides the better UI should have a big impact on\nyour decision.\nRemember that no so tech-savvy people might have to work with those reports at the\nend as well &mdash; even if it's just for deciding which bug to prioritize.\n\nHow to decide which UI is \"better\" is very subjective, but you can generally gauge what to expect from the\ntool documentation, from screenshots and videos.\nFor many popular tools we provide links to videos, talks, or whitepapers, which\nshould make that assessment a little easier for you.\nSee for example [DeepCode](/tool/deepcode) and [CodeScene](/tool/codescene).\n\n## Community Acceptance\n\nThis website is a community platform. Everyone can vote for their favorite tools\nand write helpful comments.\nTools get ranked by their votes, which makes picking tools easier for newcomers\nto a language.\nOn top of that, we also display the number Github stars for every project as\nanother indicator of community support.\n\nRoughly speaking, the more popular a tool is on Github and on\nanalysis-tools.dev, the higher the number of contributors and features/bugfixes\nin a given period of time.\n\n## Maintenance\n\nSometimes the Github star rating can be misleading: Many tools were popular at\nsome point in time but are now deprecated and unmaintained. This is a big\nmaintenance or even security risk for your project, so we make sure to flag\nevery tool that has not been updated in the last 6 months. We also mention\nalternatives for every tool to help you stay on track.\n\n## Summary\n\nThis is not an exhaustive list, but it's a start. If we forgot anything\nimportant, please let us know or &mdash; even better &mdash; send us a pull request because\nthis website is completely [open source and hosted on Github](https://github.com/analysis-tools-dev/website/).\n","html":"<p>This project started as a way to scratch my own itch:\n&quot;How do I find the best static analysis tool for my use-case?&quot;</p>\n<p>Years later, many people still seem to have the same problem.\nThere are more than 500 static analysis (SAST) tools out there; how can you\npossibly find the &quot;best&quot; one?</p>\n<p>Here are some guidelines that can support you on your search.</p>\n<h2 id=\"supported-programming-language\">Supported Programming Language</h2>\n<p>The first question you have to ask yourself is &quot;which programming languages do I\nneed to support?&quot;</p>\n<p>If you just want to support a single language like <a href=\"/tag/typescript\">TypeScript</a>\nor <a href=\"/tag/go\">Go</a>, this will narrow down the search by a lot.\nOften times there are specialized tools for each language.\nFrom our experience, they provide better insights than a tool that supports many\nlanguages,\nso look through our <a href=\"/tools\">categories</a> to find the language you need to\nsupport.</p>\n<p>If you have to support multiple languages, you can start with a &quot;metalinter&quot;\nthat supports these.</p>\n<p>One advantage of using a metalinter is that it provides a consistent overview\nof all the error output for the different languages.\nAlso, you can integrate metalinters pretty quickly, as you only have to install one\ntool instead of many to get started.</p>\n<p>If you find that a particular language is not well supported by a given\nmetalinter, that&#39;s fine: just switch off the support for that language in the\nlinter via the config and pick a dedicated linter for that language to fill the gap.</p>\n<h2 id=\"licenses\">Licenses</h2>\n<p>We made sure to include the license for every tool on the page.\nThis is vital because your company might not allow certain open source licenses\nlike the GPL in your stack or you explicitly <em>want</em> an open tool that you can\nextend and fix yourself. Proprietary tools usually come with a (sometimes hefty)\nprice tag, so you can filter those out if you want.\nOn the other hand, commercial support can be quite important in a professional\nsetup, which is where proprietary tools often shine.\nIt really depends on your use-case.\nThe <a href=\"/compare\">comparison page</a> mentions the license because of that.</p>\n<h2 id=\"integration\">Integration</h2>\n<p>Can you integrate the tool into your environment?\nWe generally distinguish between three different types of integrations:</p>\n<ul>\n<li><strong>Command-line tools</strong>: These can be called straight from the terminal and\nprint reports in plain text or machine-readable output.</li>\n<li><strong>Web services</strong>: These tools provide a website for checking reports and\ntypically integrate with your continuous integration system like <a href=\"https://github.com/features/actions\">Github\nActions</a>, <a href=\"https://travis-ci.org/\">TravisCI</a>, or <a href=\"https://circleci.com/\">CircleCI</a>.</li>\n<li><strong>IDE plugins</strong>: These integrate into your development environment (VSCode, IntelliJ,...), providing\nvaluable inline suggestions during the early phase of implementation.</li>\n</ul>\n<p>You can find out how each tool integrates by looking at the little icons next\nto the name or on the overview page of tool under &quot;Workflow integration&quot;.</p>\n<h2 id=\"standards\">Standards</h2>\n<p>Are there any industry standards that your project needs to comply to?\nThere are quite a few <a href=\"https://www.verifysoft.com/en_grammatech_compliance_with_standards.html\">industry standards</a>\nout there.\nWhich ones are relevant to your organization depends on your industry and your partners.\nAs soon as you know which ones you need, you can search for those in the search\nwindow at the top. E.g. <a href=\"https://analysis-tools.dev/tool/ldra\">LDRA</a> complies to\nvarious standards like MISRA C &amp; C++, JSF++ AV, CWE, CERT C, CERT C++.</p>\n<h2 id=\"performance\">Performance</h2>\n<p>Especially if you plan to run the tools regularly, say during <a href=\"https://en.wikipedia.org/wiki/Continuous_integration\">CI\nruns</a>,\nyou want to make sure that the linters don&#39;t slow down the build too much.</p>\n<p>The runtime of a linter usually grows with your project size, but it helps to look at a\ntool&#39;s issue tracker for any performance issues/bottlenecks. We made sure to include the\nlink to the source code for every tool (where available), which is where you can also\nfind the list of issues.</p>\n<p>For proprietary tools, there is no quick way to know the performance.\nIf you&#39;re wavering between two options, performance can be a decision\ncriterion, so make sure to check the websites of the vendors for benchmarks and\nspeed expectations.</p>\n<h2 id=\"usability\">Usability</h2>\n<p>If you can&#39;t decipher what the tool is trying to tell you, it&#39;s the developer&#39;s\nfault and not the user&#39;s.\nSo the question which tool provides the better UI should have a big impact on\nyour decision.\nRemember that no so tech-savvy people might have to work with those reports at the\nend as well &mdash; even if it&#39;s just for deciding which bug to prioritize.</p>\n<p>How to decide which UI is &quot;better&quot; is very subjective, but you can generally gauge what to expect from the\ntool documentation, from screenshots and videos.\nFor many popular tools we provide links to videos, talks, or whitepapers, which\nshould make that assessment a little easier for you.\nSee for example <a href=\"/tool/deepcode\">DeepCode</a> and <a href=\"/tool/codescene\">CodeScene</a>.</p>\n<h2 id=\"community-acceptance\">Community Acceptance</h2>\n<p>This website is a community platform. Everyone can vote for their favorite tools\nand write helpful comments.\nTools get ranked by their votes, which makes picking tools easier for newcomers\nto a language.\nOn top of that, we also display the number Github stars for every project as\nanother indicator of community support.</p>\n<p>Roughly speaking, the more popular a tool is on Github and on\nanalysis-tools.dev, the higher the number of contributors and features/bugfixes\nin a given period of time.</p>\n<h2 id=\"maintenance\">Maintenance</h2>\n<p>Sometimes the Github star rating can be misleading: Many tools were popular at\nsome point in time but are now deprecated and unmaintained. This is a big\nmaintenance or even security risk for your project, so we make sure to flag\nevery tool that has not been updated in the last 6 months. We also mention\nalternatives for every tool to help you stay on track.</p>\n<h2 id=\"summary\">Summary</h2>\n<p>This is not an exhaustive list, but it&#39;s a start. If we forgot anything\nimportant, please let us know or &mdash; even better &mdash; send us a pull request because\nthis website is completely <a href=\"https://github.com/analysis-tools-dev/website/\">open source and hosted on Github</a>.</p>\n","summary":"<p>This project started as a way to scratch my own itch:Years later, many people still seem to have the same problem.\nThere are more than 500 static analysis (SAST) tools out there; how can you\npossibly find the &quot;best&quot; one?</p>\n"},{"slug":"static-analysis-is-broken-lets-fix-it","meta":{"title":"Static Analysis Is Broken - Let’s Fix It!","date":"2020-08-19T20:00:00.000Z"},"source":"\nStatic analysis is great! It helps improve code quality by inspecting source\ncode without even running it. There are hundreds of great tools to choose from —\nmany are free or [open-source](https://github.com/analysis-tools-dev). Unfortunately, many projects still don’t make use\nof static analysis tools for various reasons.\n\nOur mission is to fix that by building an open platform for comparing static\nanalysis tools. All code is open-source and backed by the community. We’re proud\nto count [192 individual contributors on Github](https://github.com/analysis-tools-dev/static-analysis/graphs/contributors) so far. With this website, we aim\nto make static analysis accessible to even more people.\n\n## What Is Static Analysis?\n\nWouldn’t it be great to find bugs and fix issues automatically? What if you\ncould fix most problems during development instead of production? There are\ngreat tools for that!\n\nThose static analysis tools can be grouped into different categories:\n\n- **Formatters:** these apply a predefined code-style automatically and make your\n  code consistent and pretty\n- **Linters:** detect bugs and code smells\n- **Metalinters:** combine many linters into one tool\n\nEven within each category, there are more ways to group the tools. For example,\nyou could split them into [rule-based](http://www.j-paine.org/students/lectures/lect3/node5.html) or [AST-based](https://en.wikipedia.org/wiki/Abstract_syntax_tree) (and perhaps\nmachine-learning-based-) tools.\n\nThere are also different ways to incorporate those tools into your workflow:\n\n- Online services that get added to continuous integration pipelines\n- Command-line tools\n- IDE-plugins\n\nIt is a huge space for different services and approaches that is surprisingly\ntricky to organize, which leads to some problems.\n\n## Cargo Cult?\n\nWisdom about code analysis tools is spread all over the place: websites, blog\nposts, forums, videos,… there is no quick and easy way to compare tools and\nlearn about them.\n\nThis lack of information leads to a strange dogma around static analysis: it is\nseen as an overly academic topic by some and gets worshiped as the holy grail by\nothers.\n\nThere almost seems to be a weird cargo-cult around some tools, even though they\nhave long been deprecated and superseded by more powerful successors. For\nexample, [JSLint is heavily debated by the community](https://github.com/analysis-tools-dev/static-analysis/issues/223). You might be better off\nusing [eslint](https://analysis-tools.dev/tool/eslint) for new projects these days.\n\nWe provide an easy way to answer the following questions:\n\n- Is this the best tool for my use-case?\n- Is it still maintained?\n- Is the license acceptable?\n- Where can I find more information?\n\nWith that, we hope to demystify static analysis a bit.\n\n## Most Public Lists Are Outdated\n\nIf you search for “static analysis” on Google, chances are, you end up on [this\nlist on Wikipedia](https://en.wikipedia.org/wiki/List_of_tools_for_static_code_analysis). It provides a list of static analysis tools, and it’s\narguably the first contact point with static analysis for many people. It’s an\nhonest first attempt, but quite frankly, its quality is poor for many reasons:\n\n- The number of tools on the list is small: About 130 are listed, but many\n  hundred more exist.\n- It’s outdated: Many modern/powerful tools are missing.\n- Inconsistent formatting: A mixture of tables and unordered lists make\n  comparison unnecessarily hard.\n- No way to filter tools by license or programming language\n- Contains outdated external links (yep, we checked)\n- The license is missing for many tools\n- …\n\nInstead, we put a lot of effort into consistent structure and work on better\nfiltering functionality. We have tooling in place to make sure that all\ninformation is up-to-date.\n\n## All Static Analysis Tools Get Lumped Together\n\nRemember the categories from above? To most websites, it’s all linters. That\ndoesn’t help if you’re looking for a formatter or a machine-learning-based SAAS\nservice for your CI pipeline. It’s very time-consuming and tedious to wade\nthrough a sea of websites, so people rarely do. It’s like ten thousand spoons\nwhen all you need is a knife. (It’s [ironic](https://www.azlyrics.com/lyrics/alanismorissette/ironic.html) if you didn’t get that reference.)\n\n## No Fair Comparison Between The Tools\n\nMost companies just try to sell. The loudest voice on the market wins - not the\nbest tool. More niche projects that would be a better fit are hard to find.\n\nIt’s difficult to find out what the “community-endorsed” set of standard tools\nis. Therefore we support votings and discussions and work together with the\ndeveloper communities to make discovery easier.\n\n## An Open Platform\n\nThe aim of analaysis-tools.dev is to be a sharp tool that you use by choice.\nThat’s why we build this project entirely in the open to avoid bias and\ngatekeepers, which promote tools purely based on monetary interest and not on\nquality. Our mission is to establish analysis-tools.dev as a platform for\ncomparing analysis tools, and we are committed to keep the site up-to-date and\nadd features like video workshops in the future.\n\n## Thanks!\n\nLet us take the time to thank our first sponsor, [DeepCode](https://www.deepcode.ai/).\n\nIt is a real-time semantic code analysis service that is deeply rooted within\nthe open-source community. They provide their service free of charge for open\nsource — forever. You should go [check out their site](https://www.deepcode.ai/). It is great to see\ncompanies like DeepCode embrace open source and work with the community to\nestablish higher standards for code quality.\n\nWe would also like to thank all contributors on Github that helped get us to reach that milestone. You all deserve a special place in our hearts.\n\n## Support\n\nHelp make this possible analysis-tools.dev offers a lot for free, but of course,\nit is not free to operate or develop. If it provides value for you or your\ncompany and you wish to support its development, consider donating on [Github\nSponsors](https://github.com/sponsors/analysis-tools-dev/).\n","html":"<p>Static analysis is great! It helps improve code quality by inspecting source\ncode without even running it. There are hundreds of great tools to choose from —\nmany are free or <a href=\"https://github.com/analysis-tools-dev\">open-source</a>. Unfortunately, many projects still don’t make use\nof static analysis tools for various reasons.</p>\n<p>Our mission is to fix that by building an open platform for comparing static\nanalysis tools. All code is open-source and backed by the community. We’re proud\nto count <a href=\"https://github.com/analysis-tools-dev/static-analysis/graphs/contributors\">192 individual contributors on Github</a> so far. With this website, we aim\nto make static analysis accessible to even more people.</p>\n<h2 id=\"what-is-static-analysis\">What Is Static Analysis?</h2>\n<p>Wouldn’t it be great to find bugs and fix issues automatically? What if you\ncould fix most problems during development instead of production? There are\ngreat tools for that!</p>\n<p>Those static analysis tools can be grouped into different categories:</p>\n<ul>\n<li><strong>Formatters:</strong> these apply a predefined code-style automatically and make your\ncode consistent and pretty</li>\n<li><strong>Linters:</strong> detect bugs and code smells</li>\n<li><strong>Metalinters:</strong> combine many linters into one tool</li>\n</ul>\n<p>Even within each category, there are more ways to group the tools. For example,\nyou could split them into <a href=\"http://www.j-paine.org/students/lectures/lect3/node5.html\">rule-based</a> or <a href=\"https://en.wikipedia.org/wiki/Abstract_syntax_tree\">AST-based</a> (and perhaps\nmachine-learning-based-) tools.</p>\n<p>There are also different ways to incorporate those tools into your workflow:</p>\n<ul>\n<li>Online services that get added to continuous integration pipelines</li>\n<li>Command-line tools</li>\n<li>IDE-plugins</li>\n</ul>\n<p>It is a huge space for different services and approaches that is surprisingly\ntricky to organize, which leads to some problems.</p>\n<h2 id=\"cargo-cult\">Cargo Cult?</h2>\n<p>Wisdom about code analysis tools is spread all over the place: websites, blog\nposts, forums, videos,… there is no quick and easy way to compare tools and\nlearn about them.</p>\n<p>This lack of information leads to a strange dogma around static analysis: it is\nseen as an overly academic topic by some and gets worshiped as the holy grail by\nothers.</p>\n<p>There almost seems to be a weird cargo-cult around some tools, even though they\nhave long been deprecated and superseded by more powerful successors. For\nexample, <a href=\"https://github.com/analysis-tools-dev/static-analysis/issues/223\">JSLint is heavily debated by the community</a>. You might be better off\nusing <a href=\"https://analysis-tools.dev/tool/eslint\">eslint</a> for new projects these days.</p>\n<p>We provide an easy way to answer the following questions:</p>\n<ul>\n<li>Is this the best tool for my use-case?</li>\n<li>Is it still maintained?</li>\n<li>Is the license acceptable?</li>\n<li>Where can I find more information?</li>\n</ul>\n<p>With that, we hope to demystify static analysis a bit.</p>\n<h2 id=\"most-public-lists-are-outdated\">Most Public Lists Are Outdated</h2>\n<p>If you search for “static analysis” on Google, chances are, you end up on <a href=\"https://en.wikipedia.org/wiki/List_of_tools_for_static_code_analysis\">this\nlist on Wikipedia</a>. It provides a list of static analysis tools, and it’s\narguably the first contact point with static analysis for many people. It’s an\nhonest first attempt, but quite frankly, its quality is poor for many reasons:</p>\n<ul>\n<li>The number of tools on the list is small: About 130 are listed, but many\nhundred more exist.</li>\n<li>It’s outdated: Many modern/powerful tools are missing.</li>\n<li>Inconsistent formatting: A mixture of tables and unordered lists make\ncomparison unnecessarily hard.</li>\n<li>No way to filter tools by license or programming language</li>\n<li>Contains outdated external links (yep, we checked)</li>\n<li>The license is missing for many tools</li>\n<li>…</li>\n</ul>\n<p>Instead, we put a lot of effort into consistent structure and work on better\nfiltering functionality. We have tooling in place to make sure that all\ninformation is up-to-date.</p>\n<h2 id=\"all-static-analysis-tools-get-lumped-together\">All Static Analysis Tools Get Lumped Together</h2>\n<p>Remember the categories from above? To most websites, it’s all linters. That\ndoesn’t help if you’re looking for a formatter or a machine-learning-based SAAS\nservice for your CI pipeline. It’s very time-consuming and tedious to wade\nthrough a sea of websites, so people rarely do. It’s like ten thousand spoons\nwhen all you need is a knife. (It’s <a href=\"https://www.azlyrics.com/lyrics/alanismorissette/ironic.html\">ironic</a> if you didn’t get that reference.)</p>\n<h2 id=\"no-fair-comparison-between-the-tools\">No Fair Comparison Between The Tools</h2>\n<p>Most companies just try to sell. The loudest voice on the market wins - not the\nbest tool. More niche projects that would be a better fit are hard to find.</p>\n<p>It’s difficult to find out what the “community-endorsed” set of standard tools\nis. Therefore we support votings and discussions and work together with the\ndeveloper communities to make discovery easier.</p>\n<h2 id=\"an-open-platform\">An Open Platform</h2>\n<p>The aim of analaysis-tools.dev is to be a sharp tool that you use by choice.\nThat’s why we build this project entirely in the open to avoid bias and\ngatekeepers, which promote tools purely based on monetary interest and not on\nquality. Our mission is to establish analysis-tools.dev as a platform for\ncomparing analysis tools, and we are committed to keep the site up-to-date and\nadd features like video workshops in the future.</p>\n<h2 id=\"thanks\">Thanks!</h2>\n<p>Let us take the time to thank our first sponsor, <a href=\"https://www.deepcode.ai/\">DeepCode</a>.</p>\n<p>It is a real-time semantic code analysis service that is deeply rooted within\nthe open-source community. They provide their service free of charge for open\nsource — forever. You should go <a href=\"https://www.deepcode.ai/\">check out their site</a>. It is great to see\ncompanies like DeepCode embrace open source and work with the community to\nestablish higher standards for code quality.</p>\n<p>We would also like to thank all contributors on Github that helped get us to reach that milestone. You all deserve a special place in our hearts.</p>\n<h2 id=\"support\">Support</h2>\n<p>Help make this possible analysis-tools.dev offers a lot for free, but of course,\nit is not free to operate or develop. If it provides value for you or your\ncompany and you wish to support its development, consider donating on <a href=\"https://github.com/sponsors/analysis-tools-dev/\">Github\nSponsors</a>.</p>\n","summary":"<p>Static analysis is great! It helps improve code quality by inspecting source\ncode without even running it. There are hundreds of great tools to choose from —\nmany are free or <a href=\"https://github.com/analysis-tools-dev\">open-source</a>. Unfortunately, many projects still don’t make use\nof static analysis tools for various reasons.</p>\n"},{"slug":"welcome-deepcode","meta":{"title":"Welcome, DeepCode!","date":"2020-07-16T00:00:00.000Z"},"source":"\nToday we welcome DeepCode as our first sponsor.\n\nIt makes us incredibly happy to see the backing of our community project\nfrom such a forward-thinking company.\nJust like us, DeepCode thinks that the space of analysis tools could be vastly improved\nto increase code quality and foster best practices within organizations of any size.\n\nWe hope for a fruitful collaboration for both sides.\nStay tuned for a follow-up post that goes into detail about DeepCode's offerings,\nbut in the meantime go check out their [homepage](https://www.deepcode.ai/)\nas well as their [ranking on analysis-tools](/tool/deepcode/).\n","html":"<p>Today we welcome DeepCode as our first sponsor.</p>\n<p>It makes us incredibly happy to see the backing of our community project\nfrom such a forward-thinking company.\nJust like us, DeepCode thinks that the space of analysis tools could be vastly improved\nto increase code quality and foster best practices within organizations of any size.</p>\n<p>We hope for a fruitful collaboration for both sides.\nStay tuned for a follow-up post that goes into detail about DeepCode&#39;s offerings,\nbut in the meantime go check out their <a href=\"https://www.deepcode.ai/\">homepage</a>\nas well as their <a href=\"/tool/deepcode/\">ranking on analysis-tools</a>.</p>\n","summary":"<p>Today we welcome DeepCode as our first sponsor.It makes us incredibly happy to see the backing of our community project\nfrom such a forward-thinking company.\nJust like us, DeepCode thinks that the space of analysis tools could be vastly improved\nto increase code quality and foster best practices within organizations of any size.</p>\n"}]}