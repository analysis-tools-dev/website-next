[
    {
        "question": "Why Is Static Code Analysis Useful?",
        "answer": "Static code analysis is a process where the code of a software program is analyzed without running it. By using static analyzers organizations will have assurance that their product works as expected, have less bugs that need to be fixed after release ( which could cause embarrassment ) and ultimately make more money due to satisfied customers."
    },
    {
        "question": "What Are The Limits Of Static Code Analysis?",
        "answer": "One limitation of static code analysis is that it cannot identify all errors in a program. In particular, it cannot detect runtime errors, which occur when the software is actually running. Furthermore it can only analyze the code as written; it cannot take into account changes that may be made later in development or in production."
    },
    {
        "question": "What Are Some Alternative To Static Analysis?",
        "answer": "1) Fuzzing tools: These tools use random input data to test the robustness of software applications. They can help identify coding issues and security vulnerabilities.\n2) Dynamic analysis tools: these check a program's behavior at runtime, thus finding concurrency issues, invalid subprocess calls, or incorrect handling of (user) input.\n3) Automated testing tools: Automated testing tools help automate the testing process, making it faster and easier to run tests on software applications. This can help speed up the development process while still ensuring that applications are tested thoroughly before being released into production."
    },
    {
        "question": "What Are Some Popular Static Code Analysis Tools?",
        "answer": "We collect a list of the most popular static code analysis tools on this page. Popularity is measured by the number of page requests, user upvotes, and comments."
    },
    {
        "question": "How Much Do Static Analysis Tools Cost?",
        "answer": "Static analysis tools are an important part of the software development process, but they can be expensive. It's important to weigh the benefits of using a static analysis tool against the cost to make sure that you're getting the most value for your money.\nThe cost of a static analysis tool can vary depending on the features and capabilities that you need. Some tools are free, while others can be costly.\nThe benefits of using a static analysis tool far outweigh the costs, however. Static analysis tools help you find and fix bugs in your code before they become problems in production. They also help you improve the quality and reliability of your codebase, making it easier to maintain over time.\n In most cases, we believe it is worth investing in these tools as they provide significant value for teams large and small."
    },
    {
        "question": "How To Recognize Good Static Analysis Tools?",
        "answer": "The best way to find a good static analysis tool is to ask around. When we started this project, we couldn't find a lot of information on great static analysis tools and there were no ratings of the tools.\nThis was a frustrating experience, so we decided to save other developers the same trouble by creating this site. We hope that this site will help you find the best static analysis tools for your needs."
    },
    {
        "question": "What Is OWASP?",
        "answer": "Owasp is an international, non-profit organization focused on improving the security of software. Owasp provides tools, documentation and resources to help organizations secure their web applications. They also maintain a list of static analysis tools that can be used to find security vulnerabilities in web applications. However it is not actively maintained, so do your own research before using any of the tools listed there. The list is available at https://owasp.org/www-community/Source_Code_Analysis_Tools."
    },
    {
        "question": "What Is Dynamic Code Analysis?",
        "answer": "Dynamic code analysis is the process of examining a computer program while it is running. This type of analysis can be used to find errors in the code, or to determine how the program will behave when it is executed. Dynamic code analysis can also be used to identify potential security vulnerabilities in a program."
    },
    {
        "question": "When To Use Dynamic Code Analysis?",
        "answer": "There are several reasons why you might want to use dynamic code analysis:\n 1) To find errors that are not easily found with static code analysis.\n 2) To find runtime errors that may not be found with static code analysis.\n 3) To verify the correctness of software after making changes."
    },
    {
        "question": "What does the upvote percentage mean?",
        "answer": "The upvote percentage is the percentage of votes that are upvotes. It is calculated by dividing the number of upvotes by the total number of votes. The higher the percentage, the more popular the tool is."
    },
    {
        "question": "How Can I Contribute To analysis-tools.dev?",
        "answer": "Contributing to an open source project can seem like a daunting task, but it's easier than you might think! By following a few simple steps, you can become a valuable contributor to any project.\nTake some time to familiarize yourself with our contributing guidlines at https://github.com/analysis-tools-dev/static-analysis/blob/master/CONTRIBUTING.md.\nNext, start by making small contributions. These could be bug fixes, upates to the description of the tools, or even just documentation updates. This will help get you familiar with the codebase and the development process of the project.\nOnce you've made some small contributions, start working on larger tasks such as fixing major bugs or adding new features. By taking on bigger tasks,you'll be able to make more significant contributions to the project!"
    }
]
